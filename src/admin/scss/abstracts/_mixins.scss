@use "sass:map";
@use "sass:meta";
@use "./functions" as func;
@use "../design/primitives/breakpoints" as bp;
@use "../design/primitives/global" as g;
@use "./media-query" as *;

@mixin createRootStyle($styles, $prefix: null) {
    $map: func.recursive($styles);
    :root {
        @each $key, $value in $map {
            @if (meta.type-of($value) != "map") {
                $varName: if(
                    $prefix == null,
                    "--#{$key}",
                    "--#{$prefix}-#{$key}"
                );
                #{$varName}: #{$value};
            }
        }
    }
}

@mixin createVariableStyle($styles) {
    @if (map.has-key($styles, base)) {
        $map: func.recursive(map.get($styles, base));
        @include createRootStyle($map);
    }

    $clone: map.merge(bp.$breakpoints, ());
    @each $key, $value in $styles {
        @if (map.has-key($clone, $key)) {
            $map: func.recursive($value);
            $clone: map.merge(
                $clone,
                (
                    $key: $map,
                )
            );
        }
    }

    @each $key, $value in $clone {
        @if (meta.type-of($clone) == "map") {
            @include mq($key) {
                @include createRootStyle($value);
            }
        }
    }
}

@mixin createThemeStyle($themes) {
    @each $key, $value in $themes {
        @if ($key != default) {
            $theme: func.recursive($value);
            html[data-theme="#{$key}"] {
                @each $name, $var in $theme {
                    --clr-#{$name}: #{$var};
                }
            }
        }
    }
}

@mixin createTypographyStyle($styles) {
    :root {
        @each $category, $map in $styles {
            @each $size, $value in $map {
                @if map.has-key($value, "fs") {
                    --fs-#{$category}-#{$size}: #{map.get($value, "fs")};
                }
            }
        }
    }
}

@mixin generateTypographyClass($items) {
    $fillable: "fs", "fm", "lh", "ls", "fw";
    $id: map.get(g.$global, "id");

    @each $category, $map in $items {
        @each $size, $value in $map {
            $class-name: ".#{$id}-#{$category}-#{$size}";

            #{$class-name} {
                @each $prop in $fillable {
                    @if map.has-key($value, $prop) {
                        #{map.get(("fs": "font-size", "fm": "font-family", "lh": "line-height", "ls": "letter-spacing", "fw": "font-weight"), $prop)}: map.get(
                            $value,
                            $prop
                        );
                    }
                }
            }
        }
    }
}

@mixin generateColorClass($styles) {
    $map: func.recursive($styles);
    $id: map.get(g.$global, "id");

    @each $key, $value in $map {
        .#{$id}-clr-#{$key} {
            color: var(--clr-#{$key});
        }
        .#{$id}-bg-#{$key} {
            background-color: var(--clr-#{$key});
        }
    }
}
@mixin generateContainerClass($breakpoints) {
    $id: map.get(g.$global, "id");
    $gutter: map.get(g.$global, "gutter");

    @each $key, $value in $breakpoints {
        @if (map.has-key(bp.$breakpoints, $key)) {
            .#{$id}-container-#{$key} {
                max-width: #{$value}px;
                width: 100%;
                margin: 0 auto;
                padding-left: $gutter;
                padding-right: $gutter;
            }
        }
    }
}

@mixin generateSpacingClass($spacing) {
    $map: (
        mg: "margin",
        pd: "padding",
    );
    $id: map.get(g.$global, "id");
    $points: map.merge(
        bp.$breakpoints,
        (
            base: default,
        )
    );

    @each $key, $value in $spacing {
        @each $point, $_ in $points {
            @if ($point == base) {
                @each $name, $attr in $map {
                    $class: ".#{$id}-#{$name}-#{$key}";
                    @include applySpacingClass($class, $attr, $value);
                }
            } @else {
                @each $name, $attr in $map {
                    $class: ".#{$id}-#{$name}-#{$point}-#{$key}";
                    @include mq($point) {
                        @include applySpacingClass($class, $attr, $value);
                    }
                }
            }
        }
    }
}

@mixin applySpacingClass($class, $attr, $value) {
    #{$class} {
        #{$attr}: #{$value};
    }
    #{$class}--x {
        #{$attr}: 0 #{$value};
    }
    #{$class}--y {
        #{$attr}: #{$value} 0;
    }
    #{$class}--l {
        #{$attr}-left: #{$value};
    }
    #{$class}--t {
        #{$attr}-top: #{$value};
    }
    #{$class}--r {
        #{$attr}-right: #{$value};
    }
    #{$class}--b {
        #{$attr}-bottom: #{$value};
    }
}

@mixin generateSectionClass($styles) {
    $id: func.global(id);

    @each $key, $value in $styles {
        .#{$id}-section-#{$key} {
            padding-top: #{$value};
            padding-bottom: #{$value};
        }

        .#{$id}-section-#{$key}--x {
            padding-right: #{$value};
            padding-left: #{$value};
        }

        .#{$id}-section-#{$key}--t {
            padding-top: #{$value};
        }

        .#{$id}-section-#{$key}--b {
            padding-bottom: #{$value};
        }

        .#{$id}-section-#{$key}--r {
            padding-right: #{$value};
        }

        .#{$id}-section-#{$key}--l {
            padding-left: #{$value};
        }
    }
}

@mixin generateRadiusClass($styles) {
    $id: func.global(id);

    @each $key, $value in $styles {
        .#{$id}-radius-#{$key} {
            border-radius: #{$value};
        }
    }
}

@mixin flex-center() {
    display: flex;
    align-items: center;
    justify-content: center;
}

@mixin blind() {
    position: absolute;
    clip: rect(0 0 0 0);
    width: 1px;
    height: 1px;
    margin: -1px;
    overflow: hidden;
}

@mixin pos-center() {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
}

@mixin line-clamp($line) {
    overflow: hidden;
    text-overflow: ellipsis;
    -webkit-box-orient: vertical;
    display: -webkit-box;
    -webkit-line-clamp: $line;
}

@mixin img-cover() {
    width: 100%;
    height: 100%;
    object-fit: cover;
}

@mixin img-auto-cover($percent: 56.25%) {
    position: relative;
    overflow: hidden;
    height: 0;
    padding-bottom: $percent;

    img {
        @include pos-center();
        object-fit: cover;
    }
}

@mixin backdrop($opacity: 0.45) {
    @include pos-center();
    background: rgba(0, 0, 0, $opacity);
}
